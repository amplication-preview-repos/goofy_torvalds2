/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Auction as PrismaAuction,
  Bid as PrismaBid,
  Transaction as PrismaTransaction,
  Car as PrismaCar,
} from "@prisma/client";

export class AuctionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuctionCountArgs, "select">): Promise<number> {
    return this.prisma.auction.count(args);
  }

  async auctions<T extends Prisma.AuctionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuctionFindManyArgs>
  ): Promise<PrismaAuction[]> {
    return this.prisma.auction.findMany<Prisma.AuctionFindManyArgs>(args);
  }
  async auction<T extends Prisma.AuctionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuctionFindUniqueArgs>
  ): Promise<PrismaAuction | null> {
    return this.prisma.auction.findUnique(args);
  }
  async createAuction<T extends Prisma.AuctionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuctionCreateArgs>
  ): Promise<PrismaAuction> {
    return this.prisma.auction.create<T>(args);
  }
  async updateAuction<T extends Prisma.AuctionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuctionUpdateArgs>
  ): Promise<PrismaAuction> {
    return this.prisma.auction.update<T>(args);
  }
  async deleteAuction<T extends Prisma.AuctionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuctionDeleteArgs>
  ): Promise<PrismaAuction> {
    return this.prisma.auction.delete(args);
  }

  async findBids(
    parentId: string,
    args: Prisma.BidFindManyArgs
  ): Promise<PrismaBid[]> {
    return this.prisma.auction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bids(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.auction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getCar(parentId: string): Promise<PrismaCar | null> {
    return this.prisma.auction
      .findUnique({
        where: { id: parentId },
      })
      .car();
  }
}
